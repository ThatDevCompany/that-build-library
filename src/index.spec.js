'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
const index_1 = require('./index')
const _ = require('lodash')
const Original = _.defaults({}, index_1.BuildUtils)
const trueSpy = jasmine.createSpy().and.returnValue(true)
const falseSpy = jasmine.createSpy().and.returnValue(false)
const isDirTrueSpy = jasmine.createSpy().and.returnValue({
	isDirectory() {
		return true
	}
})
const isDirFalseSpy = jasmine.createSpy().and.returnValue({
	isDirectory() {
		return false
	}
})
const dirlistSpy = jasmine.createSpy().and.returnValue(['childa', 'childb'])
const resolveSpy = jasmine.createSpy().and.returnValue(Promise.resolve())
const rejectSpy = jasmine.createSpy().and.returnValue(Promise.reject('error'))
describe('utils.tools', () => {
	beforeEach(() => {
		_.assign(index_1.BuildUtils, Original)
		index_1.BuildUtils.fs = {}
		index_1.BuildUtils.spawn = null
		index_1.BuildUtils.del = null
	})
	it('should be an object', () => {
		expect(typeof index_1.BuildUtils).toBe('object')
	})
	it('should CLEAN', done => {
		resolveSpy.calls.reset()
		index_1.BuildUtils.del = resolveSpy
		index_1.BuildUtils.clean('/dummy').then(() => {
			expect(index_1.BuildUtils.del.calls.all().length).toBe(1)
			done()
		})
	})
	it('should throw CLEAN ERROR an error occurs during deletion', done => {
		rejectSpy.calls.reset()
		index_1.BuildUtils.del = rejectSpy
		index_1.BuildUtils.clean('/dummy')
			.then(() => {
				expect(false).toBeTruthy()
				done()
			})
			.catch(() => {
				expect(index_1.BuildUtils.del.calls.all().length).toBe(1)
				done()
			})
	})
	it('should npmPublish without a package processor', done => {
		trueSpy.calls.reset()
		resolveSpy.calls.reset()
		index_1.BuildUtils.updatePackage = jasmine
			.createSpy()
			.and.returnValue(Promise.resolve({ version: '0.1.2' }))
		index_1.BuildUtils.exec = resolveSpy
		index_1.BuildUtils.clean = resolveSpy
		index_1.BuildUtils.npmPublish('topath')
			.then(() => {
				expect(resolveSpy.calls.all().length).toBe(2)
				done()
			})
			.catch(err => {
				console.error(err)
				expect(false).toBeTruthy()
				done()
			})
	})
	it('should updatePackage', done => {
		trueSpy.calls.reset()
		index_1.BuildUtils.fs.readFileSync = jasmine
			.createSpy()
			.and.returnValue('{ "version": "0.1.2" }')
		index_1.BuildUtils.fs.writeFileSync = trueSpy
		index_1.BuildUtils.updatePackage()
			.then(data => {
				expect(trueSpy.calls.all().length).toBe(1)
				expect(data).toBeDefined()
				expect(data.version).toBe('0.1.3')
				done()
			})
			.catch(() => {
				expect(false).toBeTruthy()
				done()
			})
	})
	it('should tsc', () => {
		trueSpy.calls.reset()
		index_1.BuildUtils.exec = trueSpy
		index_1.BuildUtils.tsc('config').then(() => {
			expect(trueSpy.calls.all().length).toBe(1)
			expect(trueSpy.calls.mostRecent().args.length).toBe(2)
			expect(trueSpy.calls.mostRecent().args[0]).toBe('tsc')
			expect(trueSpy.calls.mostRecent().args[1][0]).toBe('-p')
			expect(trueSpy.calls.mostRecent().args[1][1]).toBe('config')
		})
	})
	it('should exec correctly', done => {
		index_1.BuildUtils.spawn = jasmine.createSpy().and.returnValue({
			stdout: {
				on: (x, y) => {
					setTimeout(() => {
						y('data')
					}, 500)
				}
			},
			stderr: {
				on: (x, y) => {
					setTimeout(() => {
						y('data')
					}, 600)
				}
			},
			on: (x, y) => {
				setTimeout(() => {
					y(0)
				}, 1000)
			}
		})
		index_1.BuildUtils.exec('cmd', ['a', 'b'])
			.then(() => {
				done()
			})
			.catch(() => {
				expect(false).toBeTruthy()
				done()
			})
	})
	it('should exec incorrectly', done => {
		index_1.BuildUtils.spawn = jasmine.createSpy().and.returnValue({
			stdout: {
				on: (x, y) => {
					setTimeout(() => {
						y('data')
					}, 500)
				}
			},
			stderr: {
				on: (x, y) => {
					setTimeout(() => {
						y('data')
					}, 600)
				}
			},
			on: (x, y) => {
				setTimeout(() => {
					y(1)
				}, 1000)
			}
		})
		index_1.BuildUtils.exec('cmd', ['a', 'b'])
			.then(() => {
				expect(false).toBeTruthy()
				done()
			})
			.catch(() => {
				done()
			})
	})
})
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBb0M7QUFDcEMsNEJBQTJCO0FBRTNCLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLGtCQUFVLENBQUMsQ0FBQTtBQUMzQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN6RCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMzRCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztJQUN4RCxXQUFXO1FBQ1YsT0FBTyxJQUFJLENBQUE7SUFDWixDQUFDO0NBQ0QsQ0FBQyxDQUFBO0FBQ0YsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7SUFDekQsV0FBVztRQUNWLE9BQU8sS0FBSyxDQUFBO0lBQ2IsQ0FBQztDQUNELENBQUMsQ0FBQTtBQUNGLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7QUFDNUUsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7QUFDekUsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxD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RyxFQUFFO3dCQUNmLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtvQkFDVixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7Z0JBQ1IsQ0FBQzthQUNEO1lBQ0QsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNaLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ2YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNMLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUNULENBQUM7U0FDRCxDQUFDLENBQUE7UUFDRixrQkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDaEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNWLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtZQUMxQixJQUFJLEVBQUUsQ0FBQTtRQUNQLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDWCxJQUFJLEVBQUUsQ0FBQTtRQUNQLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1aWxkVXRpbHMgfSBmcm9tICcuL2luZGV4J1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnXG5cbmNvbnN0IE9yaWdpbmFsID0gXy5kZWZhdWx0cyh7fSwgQnVpbGRVdGlscylcbmNvbnN0IHRydWVTcHkgPSBqYXNtaW5lLmNyZWF0ZVNweSgpLmFuZC5yZXR1cm5WYWx1ZSh0cnVlKVxuY29uc3QgZmFsc2VTcHkgPSBqYXNtaW5lLmNyZWF0ZVNweSgpLmFuZC5yZXR1cm5WYWx1ZShmYWxzZSlcbmNvbnN0IGlzRGlyVHJ1ZVNweSA9IGphc21pbmUuY3JlYXRlU3B5KCkuYW5kLnJldHVyblZhbHVlKHtcblx0aXNEaXJlY3RvcnkoKSB7XG5cdFx0cmV0dXJuIHRydWVcblx0fVxufSlcbmNvbnN0IGlzRGlyRmFsc2VTcHkgPSBqYXNtaW5lLmNyZWF0ZVNweSgpLmFuZC5yZXR1cm5WYWx1ZSh7XG5cdGlzRGlyZWN0b3J5KCkge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59KVxuY29uc3QgZGlybGlzdFNweSA9IGphc21pbmUuY3JlYXRlU3B5KCkuYW5kLnJldHVyblZhbHVlKFsnY2hpbGRhJywgJ2NoaWxkYiddKVxuY29uc3QgcmVzb2x2ZVNweSA9IGphc21pbmUuY3JlYXRlU3B5KCkuYW5kLnJldHVyblZhbHVlKFByb21pc2UucmVzb2x2ZSgpKVxuY29uc3QgcmVqZWN0U3B5ID0gamFzbWluZS5jcmVhdGVTcHkoKS5hbmQucmV0dXJuVmFsdWUoUHJvbWlzZS5yZWplY3QoJ2Vycm9yJykpXG5cbmRlc2NyaWJlKCd1dGlscy50b29scycsICgpID0+IHtcblx0YmVmb3JlRWFjaCgoKSA9PiB7XG5cdFx0Xy5hc3NpZ24oQnVpbGRVdGlscywgT3JpZ2luYWwpXG5cdFx0QnVpbGRVdGlscy5mcyA9IHt9XG5cdFx0QnVpbGRVdGlscy5zcGF3biA9IG51bGxcblx0XHRCdWlsZFV0aWxzLmRlbCA9IG51bGxcblx0fSlcblxuXHRpdCgnc2hvdWxkIGJlIGFuIG9iamVjdCcsICgpID0+IHtcblx0XHRleHBlY3QodHlwZW9mIEJ1aWxkVXRpbHMpLnRvQmUoJ29iamVjdCcpXG5cdH0pXG5cblx0aXQoJ3Nob3VsZCBDTEVBTicsIGRvbmUgPT4ge1xuXHRcdHJlc29sdmVTcHkuY2FsbHMucmVzZXQoKVxuXHRcdEJ1aWxkVXRpbHMuZGVsID0gcmVzb2x2ZVNweVxuXHRcdEJ1aWxkVXRpbHMuY2xlYW4oJy9kdW1teScpLnRoZW4oKCkgPT4ge1xuXHRcdFx0ZXhwZWN0KEJ1aWxkVXRpbHMuZGVsLmNhbGxzLmFsbCgpLmxlbmd0aCkudG9CZSgxKVxuXHRcdFx0ZG9uZSgpXG5cdFx0fSlcblx0fSlcblxuXHRpdCgnc2hvdWxkIHRocm93IENMRUFOIEVSUk9SIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgZGVsZXRpb24nLCBkb25lID0+IHtcblx0XHRyZWplY3RTcHkuY2FsbHMucmVzZXQoKVxuXHRcdEJ1aWxkVXRpbHMuZGVsID0gcmVqZWN0U3B5XG5cdFx0QnVpbGRVdGlscy5jbGVhbignL2R1bW15Jylcblx0XHRcdC50aGVuKCgpID0+IHtcblx0XHRcdFx0ZXhwZWN0KGZhbHNlKS50b0JlVHJ1dGh5KClcblx0XHRcdFx0ZG9uZSgpXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKCgpID0+IHtcblx0XHRcdFx0ZXhwZWN0KEJ1aWxkVXRpbHMuZGVsLmNhbGxzLmFsbCgpLmxlbmd0aCkudG9CZSgxKVxuXHRcdFx0XHRkb25lKClcblx0XHRcdH0pXG5cdH0pXG5cblx0aXQoJ3Nob3VsZCBucG1QdWJsaXNoIHdpdGhvdXQgYSBwYWNrYWdlIHByb2Nlc3NvcicsIGRvbmUgPT4ge1xuXHRcdHRydWVTcHkuY2FsbHMucmVzZXQoKVxuXHRcdHJlc29sdmVTcHkuY2FsbHMucmVzZXQoKVxuXHRcdEJ1aWxkVXRpbHMudXBkYXRlUGFja2FnZSA9IGphc21pbmVcblx0XHRcdC5jcmVhdGVTcHkoKVxuXHRcdFx0LmFuZC5yZXR1cm5WYWx1ZShQcm9taXNlLnJlc29sdmUoeyB2ZXJzaW9uOiAnMC4xLjInIH0pKVxuXHRcdEJ1aWxkVXRpbHMuZXhlYyA9IHJlc29sdmVTcHlcblx0XHRCdWlsZFV0aWxzLmNsZWFuID0gcmVzb2x2ZVNweVxuXHRcdEJ1aWxkVXRpbHMubnBtUHVibGlzaCgndG9wYXRoJylcblx0XHRcdC50aGVuKCgpID0+IHtcblx0XHRcdFx0ZXhwZWN0KHJlc29sdmVTcHkuY2FsbHMuYWxsKCkubGVuZ3RoKS50b0JlKDIpXG5cdFx0XHRcdGRvbmUoKVxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChlcnIgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGVycilcblx0XHRcdFx0ZXhwZWN0KGZhbHNlKS50b0JlVHJ1dGh5KClcblx0XHRcdFx0ZG9uZSgpXG5cdFx0XHR9KVxuXHR9KVxuXG5cdGl0KCdzaG91bGQgdXBkYXRlUGFja2FnZScsIGRvbmUgPT4ge1xuXHRcdHRydWVTcHkuY2FsbHMucmVzZXQoKVxuXHRcdEJ1aWxkVXRpbHMuZnMucmVhZEZpbGVTeW5jID0gamFzbWluZVxuXHRcdFx0LmNyZWF0ZVNweSgpXG5cdFx0XHQuYW5kLnJldHVyblZhbHVlKCd7IFwidmVyc2lvblwiOiBcIjAuMS4yXCIgfScpXG5cdFx0QnVpbGRVdGlscy5mcy53cml0ZUZpbGVTeW5jID0gdHJ1ZVNweVxuXHRcdEJ1aWxkVXRpbHMudXBkYXRlUGFja2FnZSgpXG5cdFx0XHQudGhlbigoZGF0YTogYW55KSA9PiB7XG5cdFx0XHRcdGV4cGVjdCh0cnVlU3B5LmNhbGxzLmFsbCgpLmxlbmd0aCkudG9CZSgxKVxuXHRcdFx0XHRleHBlY3QoZGF0YSkudG9CZURlZmluZWQoKVxuXHRcdFx0XHRleHBlY3QoZGF0YS52ZXJzaW9uKS50b0JlKCcwLjEuMycpXG5cdFx0XHRcdGRvbmUoKVxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaCgoKSA9PiB7XG5cdFx0XHRcdGV4cGVjdChmYWxzZSkudG9CZVRydXRoeSgpXG5cdFx0XHRcdGRvbmUoKVxuXHRcdFx0fSlcblx0fSlcblxuXHRpdCgnc2hvdWxkIHRzYycsICgpID0+IHtcblx0XHR0cnVlU3B5LmNhbGxzLnJlc2V0KClcblx0XHRCdWlsZFV0aWxzLmV4ZWMgPSB0cnVlU3B5XG5cdFx0QnVpbGRVdGlscy50c2MoJ2NvbmZpZycpLnRoZW4oKCkgPT4ge1xuXHRcdFx0ZXhwZWN0KHRydWVTcHkuY2FsbHMuYWxsKCkubGVuZ3RoKS50b0JlKDEpXG5cdFx0XHRleHBlY3QodHJ1ZVNweS5jYWxscy5tb3N0UmVjZW50KCkuYXJncy5sZW5ndGgpLnRvQmUoMilcblx0XHRcdGV4cGVjdCh0cnVlU3B5LmNhbGxzLm1vc3RSZWNlbnQoKS5hcmdzWzBdKS50b0JlKCd0c2MnKVxuXHRcdFx0ZXhwZWN0KHRydWVTcHkuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3NbMV1bMF0pLnRvQmUoJy1wJylcblx0XHRcdGV4cGVjdCh0cnVlU3B5LmNhbGxzLm1vc3RSZWNlbnQoKS5hcmdzWzFdWzFdKS50b0JlKCdjb25maWcnKVxuXHRcdH0pXG5cdH0pXG5cblx0aXQoJ3Nob3VsZCBleGVjIGNvcnJlY3RseScsIGRvbmUgPT4ge1xuXHRcdEJ1aWxkVXRpbHMuc3Bhd24gPSBqYXNtaW5lLmNyZWF0ZVNweSgpLmFuZC5yZXR1cm5WYWx1ZSh7XG5cdFx0XHRzdGRvdXQ6IHtcblx0XHRcdFx0b246ICh4LCB5KSA9PiB7XG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHR5KCdkYXRhJylcblx0XHRcdFx0XHR9LCA1MDApXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRzdGRlcnI6IHtcblx0XHRcdFx0b246ICh4LCB5KSA9PiB7XG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHR5KCdkYXRhJylcblx0XHRcdFx0XHR9LCA2MDApXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRvbjogKHgsIHkpID0+IHtcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0eSgwKVxuXHRcdFx0XHR9LCAxMDAwKVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0QnVpbGRVdGlscy5leGVjKCdjbWQnLCBbJ2EnLCAnYiddKVxuXHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRkb25lKClcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goKCkgPT4ge1xuXHRcdFx0XHRleHBlY3QoZmFsc2UpLnRvQmVUcnV0aHkoKVxuXHRcdFx0XHRkb25lKClcblx0XHRcdH0pXG5cdH0pXG5cblx0aXQoJ3Nob3VsZCBleGVjIGluY29ycmVjdGx5JywgZG9uZSA9PiB7XG5cdFx0QnVpbGRVdGlscy5zcGF3biA9IGphc21pbmUuY3JlYXRlU3B5KCkuYW5kLnJldHVyblZhbHVlKHtcblx0XHRcdHN0ZG91dDoge1xuXHRcdFx0XHRvbjogKHgsIHkpID0+IHtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdHkoJ2RhdGEnKVxuXHRcdFx0XHRcdH0sIDUwMClcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdHN0ZGVycjoge1xuXHRcdFx0XHRvbjogKHgsIHkpID0+IHtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdHkoJ2RhdGEnKVxuXHRcdFx0XHRcdH0sIDYwMClcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG9uOiAoeCwgeSkgPT4ge1xuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHR5KDEpXG5cdFx0XHRcdH0sIDEwMDApXG5cdFx0XHR9XG5cdFx0fSlcblx0XHRCdWlsZFV0aWxzLmV4ZWMoJ2NtZCcsIFsnYScsICdiJ10pXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdGV4cGVjdChmYWxzZSkudG9CZVRydXRoeSgpXG5cdFx0XHRcdGRvbmUoKVxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaCgoKSA9PiB7XG5cdFx0XHRcdGRvbmUoKVxuXHRcdFx0fSlcblx0fSlcbn0pXG4iXX0=
