"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * PRIVATE Zip Folder
 */
function zipFolder(zip, ffs, root, dir) {
    dir = dir || '';
    let files = ffs.readdirSync(root + (dir ? '/' + dir : ''));
    files.forEach(file => {
        if (['.ts', '.js.map'].some(e => file.endsWith(e))) {
            return;
        }
        let stat = ffs.statSync(root + (dir ? '/' + dir : '') + '/' + file);
        if (stat.isFile()) {
            zipFile(zip, ffs, root, dir, file);
        }
        else if (stat.isDirectory()) {
            zipFolder(zip, ffs, root, dir ? dir + '/' + file : file);
        }
    });
}
exports.zipFolder = zipFolder;
/**
 * PRIVATE Zip File
 */
function zipFile(zip, ffs, root, dir, file) {
    dir = dir || '';
    let zipfolder = dir ? zip.folder(dir) : zip;
    const data = ffs.readFileSync(root + (dir ? '/' + dir : '') + '/' + file);
    zipfolder.file(file, data);
}
exports.zipFile = zipFile;
/**
 * PRIVATE Check Folder
 */
function checkFolder(ffs, fld) {
    let fldBits = fld.split('/'), mkfld = '';
    fldBits.forEach(toBit => {
        mkfld = mkfld ? mkfld + '/' + toBit : toBit;
        if (mkfld && !ffs.existsSync(mkfld)) {
            ffs.mkdirSync(mkfld);
        }
    });
}
exports.checkFolder = checkFolder;
/**
 * PRIVATE Copy Folder
 */
function copyFolder(ffs, from, to) {
    checkFolder(ffs, to);
    let tasks = [];
    ffs.readdirSync(from).forEach(child => {
        if (ffs.statSync(from + '/' + child).isDirectory()) {
            copyFolder(ffs, from + '/' + child, to + '/' + child);
        }
        else {
            copyFile(ffs, from + '/' + child, to + '/' + child);
        }
    });
}
exports.copyFolder = copyFolder;
/**
 * PRIVATE COPY File
 */
function copyFile(ffs, from, to) {
    ffs.copyFileSync(from, to);
}
exports.copyFile = copyFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByaXZhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7R0FFRztBQUNILG1CQUEwQixHQUFRLEVBQUUsR0FBUSxFQUFFLElBQVksRUFBRSxHQUFXO0lBQ3RFLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFBO0lBQ2YsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDMUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNwQixJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuRCxPQUFNO1NBQ047UUFDRCxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQ25FLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDbEM7YUFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUM5QixTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDeEQ7SUFDRixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFkRCw4QkFjQztBQUVEOztHQUVHO0FBQ0gsaUJBQ0MsR0FBUSxFQUNSLEdBQVEsRUFDUixJQUFZLEVBQ1osR0FBVyxFQUNYLElBQVk7SUFFWixHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQTtJQUNmLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBO0lBQzNDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDekUsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDM0IsQ0FBQztBQVhELDBCQVdDO0FBRUQ7O0dBRUc7QUFDSCxxQkFBNEIsR0FBUSxFQUFFLEdBQVc7SUFDaEQsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFDM0IsS0FBSyxHQUFHLEVBQUUsQ0FBQTtJQUNYLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtRQUMzQyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDcEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNwQjtJQUNGLENBQUMsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQVRELGtDQVNDO0FBRUQ7O0dBRUc7QUFDSCxvQkFBMkIsR0FBUSxFQUFFLElBQVksRUFBRSxFQUFVO0lBQzVELFdBQVcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDcEIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFBO0lBQ2QsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDckMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDbkQsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFBO1NBQ3JEO2FBQU07WUFDTixRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsS0FBSyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUE7U0FDbkQ7SUFDRixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFWRCxnQ0FVQztBQUVEOztHQUVHO0FBQ0gsa0JBQXlCLEdBQVEsRUFBRSxJQUFZLEVBQUUsRUFBVTtJQUMxRCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUMzQixDQUFDO0FBRkQsNEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBSSVZBVEUgWmlwIEZvbGRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gemlwRm9sZGVyKHppcDogYW55LCBmZnM6IGFueSwgcm9vdDogc3RyaW5nLCBkaXI6IHN0cmluZykge1xuXHRkaXIgPSBkaXIgfHwgJydcblx0bGV0IGZpbGVzID0gZmZzLnJlYWRkaXJTeW5jKHJvb3QgKyAoZGlyID8gJy8nICsgZGlyIDogJycpKVxuXHRmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuXHRcdGlmIChbJy50cycsICcuanMubWFwJ10uc29tZShlID0+IGZpbGUuZW5kc1dpdGgoZSkpKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cdFx0bGV0IHN0YXQgPSBmZnMuc3RhdFN5bmMocm9vdCArIChkaXIgPyAnLycgKyBkaXIgOiAnJykgKyAnLycgKyBmaWxlKVxuXHRcdGlmIChzdGF0LmlzRmlsZSgpKSB7XG5cdFx0XHR6aXBGaWxlKHppcCwgZmZzLCByb290LCBkaXIsIGZpbGUpXG5cdFx0fSBlbHNlIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcblx0XHRcdHppcEZvbGRlcih6aXAsIGZmcywgcm9vdCwgZGlyID8gZGlyICsgJy8nICsgZmlsZSA6IGZpbGUpXG5cdFx0fVxuXHR9KVxufVxuXG4vKipcbiAqIFBSSVZBVEUgWmlwIEZpbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHppcEZpbGUoXG5cdHppcDogYW55LFxuXHRmZnM6IGFueSxcblx0cm9vdDogc3RyaW5nLFxuXHRkaXI6IHN0cmluZyxcblx0ZmlsZTogc3RyaW5nXG4pIHtcblx0ZGlyID0gZGlyIHx8ICcnXG5cdGxldCB6aXBmb2xkZXIgPSBkaXIgPyB6aXAuZm9sZGVyKGRpcikgOiB6aXBcblx0Y29uc3QgZGF0YSA9IGZmcy5yZWFkRmlsZVN5bmMocm9vdCArIChkaXIgPyAnLycgKyBkaXIgOiAnJykgKyAnLycgKyBmaWxlKVxuXHR6aXBmb2xkZXIuZmlsZShmaWxlLCBkYXRhKVxufVxuXG4vKipcbiAqIFBSSVZBVEUgQ2hlY2sgRm9sZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0ZvbGRlcihmZnM6IGFueSwgZmxkOiBzdHJpbmcpIHtcblx0bGV0IGZsZEJpdHMgPSBmbGQuc3BsaXQoJy8nKSxcblx0XHRta2ZsZCA9ICcnXG5cdGZsZEJpdHMuZm9yRWFjaCh0b0JpdCA9PiB7XG5cdFx0bWtmbGQgPSBta2ZsZCA/IG1rZmxkICsgJy8nICsgdG9CaXQgOiB0b0JpdFxuXHRcdGlmIChta2ZsZCAmJiAhZmZzLmV4aXN0c1N5bmMobWtmbGQpKSB7XG5cdFx0XHRmZnMubWtkaXJTeW5jKG1rZmxkKVxuXHRcdH1cblx0fSlcbn1cblxuLyoqXG4gKiBQUklWQVRFIENvcHkgRm9sZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5Rm9sZGVyKGZmczogYW55LCBmcm9tOiBzdHJpbmcsIHRvOiBzdHJpbmcpIHtcblx0Y2hlY2tGb2xkZXIoZmZzLCB0bylcblx0bGV0IHRhc2tzID0gW11cblx0ZmZzLnJlYWRkaXJTeW5jKGZyb20pLmZvckVhY2goY2hpbGQgPT4ge1xuXHRcdGlmIChmZnMuc3RhdFN5bmMoZnJvbSArICcvJyArIGNoaWxkKS5pc0RpcmVjdG9yeSgpKSB7XG5cdFx0XHRjb3B5Rm9sZGVyKGZmcywgZnJvbSArICcvJyArIGNoaWxkLCB0byArICcvJyArIGNoaWxkKVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb3B5RmlsZShmZnMsIGZyb20gKyAnLycgKyBjaGlsZCwgdG8gKyAnLycgKyBjaGlsZClcblx0XHR9XG5cdH0pXG59XG5cbi8qKlxuICogUFJJVkFURSBDT1BZIEZpbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHlGaWxlKGZmczogYW55LCBmcm9tOiBzdHJpbmcsIHRvOiBzdHJpbmcpIHtcblx0ZmZzLmNvcHlGaWxlU3luYyhmcm9tLCB0bylcbn1cbiJdfQ==