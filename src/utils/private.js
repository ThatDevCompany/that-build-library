'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
/**
 * PRIVATE Zip Folder
 */
function zipFolder(zip, ffs, root, dir) {
	dir = dir || ''
	let files = ffs.readdirSync(root + (dir ? '/' + dir : ''))
	files.forEach(file => {
		if (['.ts', '.js.map'].some(e => file.endsWith(e))) {
			return
		}
		let stat = ffs.statSync(root + (dir ? '/' + dir : '') + '/' + file)
		if (stat.isFile()) {
			zipFile(zip, ffs, root, dir, file)
		} else if (stat.isDirectory()) {
			zipFolder(zip, ffs, root, dir ? dir + '/' + file : file)
		}
	})
}
exports.zipFolder = zipFolder
/**
 * PRIVATE Zip File
 */
function zipFile(zip, ffs, root, dir, file) {
	dir = dir || ''
	let zipfolder = dir ? zip.folder(dir) : zip
	const data = ffs.readFileSync(root + (dir ? '/' + dir : '') + '/' + file)
	zipfolder.file(file, data)
}
exports.zipFile = zipFile
/**
 * PRIVATE Check Folder
 */
function checkFolder(ffs, fld) {
	let fldBits = fld.split('/'),
		mkfld = ''
	fldBits.forEach(toBit => {
		mkfld = mkfld ? mkfld + '/' + toBit : toBit
		if (mkfld && !ffs.existsSync(mkfld)) {
			ffs.mkdirSync(mkfld)
		}
	})
}
exports.checkFolder = checkFolder
/**
 * PRIVATE Copy Folder
 */
function copyFolder(ffs, from, to) {
	checkFolder(ffs, to)
	let tasks = []
	ffs.readdirSync(from).forEach(child => {
		if (ffs.statSync(from + '/' + child).isDirectory()) {
			copyFolder(ffs, from + '/' + child, to + '/' + child)
		} else {
			copyFile(ffs, from + '/' + child, to + '/' + child)
		}
	})
}
exports.copyFolder = copyFolder
/**
 * PRIVATE COPY File
 */
function copyFile(ffs, from, to) {
	ffs.writeFileSync(to, ffs.readFileSync(from).toString())
}
exports.copyFile = copyFile
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByaXZhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7R0FFRztBQUNILG1CQUEwQixHQUFRLEVBQUUsR0FBUSxFQUFFLElBQVksRUFBRSxHQUFXO0lBQ3RFLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFBO0lBQ2YsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDMUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNwQixJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuRCxPQUFNO1NBQ047UUFDRCxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQ25FLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDbEM7YUFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUM5QixTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDeEQ7SUFDRixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFkRCw4QkFjQztBQUVEOztHQUVHO0FBQ0gsaUJBQ0MsR0FBUSxFQUNSLEdBQVEsRUFDUixJQUFZLEVBQ1osR0FBVyxFQUNYLElBQVk7SUFFWixHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQTtJQUNmLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBO0lBQzNDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDekUsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDM0IsQ0FBQztBQVhELDBCQVdDO0FBRUQ7O0dBRUc7QUFDSCxxQkFBNEIsR0FBUSxFQUFFLEdBQVc7SUFDaEQsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFDM0IsS0FBSyxHQUFHLEVBQUUsQ0FBQTtJQUNYLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtRQUMzQyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDcEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNwQjtJQUNGLENBQUMsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQVRELGtDQVNDO0FBRUQ7O0dBRUc7QUFDSCxvQkFBMkIsR0FBUSxFQUFFLElBQVksRUFBRSxFQUFVO0lBQzVELFdBQVcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDcEIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFBO0lBQ2QsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDckMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDbkQsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFBO1NBQ3JEO2FBQU07WUFDTixRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsS0FBSyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUE7U0FDbkQ7SUFDRixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFWRCxnQ0FVQztBQUVEOztHQUVHO0FBQ0gsa0JBQXlCLEdBQVEsRUFBRSxJQUFZLEVBQUUsRUFBVTtJQUMxRCxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7QUFDekQsQ0FBQztBQUZELDRCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQUklWQVRFIFppcCBGb2xkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHppcEZvbGRlcih6aXA6IGFueSwgZmZzOiBhbnksIHJvb3Q6IHN0cmluZywgZGlyOiBzdHJpbmcpIHtcblx0ZGlyID0gZGlyIHx8ICcnXG5cdGxldCBmaWxlcyA9IGZmcy5yZWFkZGlyU3luYyhyb290ICsgKGRpciA/ICcvJyArIGRpciA6ICcnKSlcblx0ZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcblx0XHRpZiAoWycudHMnLCAnLmpzLm1hcCddLnNvbWUoZSA9PiBmaWxlLmVuZHNXaXRoKGUpKSkge1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdGxldCBzdGF0ID0gZmZzLnN0YXRTeW5jKHJvb3QgKyAoZGlyID8gJy8nICsgZGlyIDogJycpICsgJy8nICsgZmlsZSlcblx0XHRpZiAoc3RhdC5pc0ZpbGUoKSkge1xuXHRcdFx0emlwRmlsZSh6aXAsIGZmcywgcm9vdCwgZGlyLCBmaWxlKVxuXHRcdH0gZWxzZSBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG5cdFx0XHR6aXBGb2xkZXIoemlwLCBmZnMsIHJvb3QsIGRpciA/IGRpciArICcvJyArIGZpbGUgOiBmaWxlKVxuXHRcdH1cblx0fSlcbn1cblxuLyoqXG4gKiBQUklWQVRFIFppcCBGaWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB6aXBGaWxlKFxuXHR6aXA6IGFueSxcblx0ZmZzOiBhbnksXG5cdHJvb3Q6IHN0cmluZyxcblx0ZGlyOiBzdHJpbmcsXG5cdGZpbGU6IHN0cmluZ1xuKSB7XG5cdGRpciA9IGRpciB8fCAnJ1xuXHRsZXQgemlwZm9sZGVyID0gZGlyID8gemlwLmZvbGRlcihkaXIpIDogemlwXG5cdGNvbnN0IGRhdGEgPSBmZnMucmVhZEZpbGVTeW5jKHJvb3QgKyAoZGlyID8gJy8nICsgZGlyIDogJycpICsgJy8nICsgZmlsZSlcblx0emlwZm9sZGVyLmZpbGUoZmlsZSwgZGF0YSlcbn1cblxuLyoqXG4gKiBQUklWQVRFIENoZWNrIEZvbGRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tGb2xkZXIoZmZzOiBhbnksIGZsZDogc3RyaW5nKSB7XG5cdGxldCBmbGRCaXRzID0gZmxkLnNwbGl0KCcvJyksXG5cdFx0bWtmbGQgPSAnJ1xuXHRmbGRCaXRzLmZvckVhY2godG9CaXQgPT4ge1xuXHRcdG1rZmxkID0gbWtmbGQgPyBta2ZsZCArICcvJyArIHRvQml0IDogdG9CaXRcblx0XHRpZiAobWtmbGQgJiYgIWZmcy5leGlzdHNTeW5jKG1rZmxkKSkge1xuXHRcdFx0ZmZzLm1rZGlyU3luYyhta2ZsZClcblx0XHR9XG5cdH0pXG59XG5cbi8qKlxuICogUFJJVkFURSBDb3B5IEZvbGRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weUZvbGRlcihmZnM6IGFueSwgZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nKSB7XG5cdGNoZWNrRm9sZGVyKGZmcywgdG8pXG5cdGxldCB0YXNrcyA9IFtdXG5cdGZmcy5yZWFkZGlyU3luYyhmcm9tKS5mb3JFYWNoKGNoaWxkID0+IHtcblx0XHRpZiAoZmZzLnN0YXRTeW5jKGZyb20gKyAnLycgKyBjaGlsZCkuaXNEaXJlY3RvcnkoKSkge1xuXHRcdFx0Y29weUZvbGRlcihmZnMsIGZyb20gKyAnLycgKyBjaGlsZCwgdG8gKyAnLycgKyBjaGlsZClcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29weUZpbGUoZmZzLCBmcm9tICsgJy8nICsgY2hpbGQsIHRvICsgJy8nICsgY2hpbGQpXG5cdFx0fVxuXHR9KVxufVxuXG4vKipcbiAqIFBSSVZBVEUgQ09QWSBGaWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5RmlsZShmZnM6IGFueSwgZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nKSB7XG5cdGZmcy53cml0ZUZpbGVTeW5jKHRvLCBmZnMucmVhZEZpbGVTeW5jKGZyb20pLnRvU3RyaW5nKCkpXG59XG4iXX0=
